<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>js on Cirplan</title><link>https://cirplan.me/tags/js/</link><description>Recent content in js on Cirplan</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 13 Mar 2017 01:37:39 +0800</lastBuildDate><atom:link href="https://cirplan.me/tags/js/index.xml" rel="self" type="application/rss+xml"/><item><title>使用koa2对接微信公众平台</title><link>https://cirplan.me/post/2017/03-13-wx-platform-conect/</link><pubDate>Mon, 13 Mar 2017 01:37:39 +0800</pubDate><guid>https://cirplan.me/post/2017/03-13-wx-platform-conect/</guid><description>这几天心血来潮，想玩下微信公众平台，看看它是如何对接到个人服务器的。这里简单记录下。 1 2 3 环境： node v7.7.1 koa v2.0.1 流程 在微信公众平台的 开发 -&amp;gt; 基本配置 那</description></item><item><title>Undescore.js和jQuery的类型判断</title><link>https://cirplan.me/post/2016/02-19-js-date-type2/</link><pubDate>Fri, 19 Feb 2016 22:09:43 +0800</pubDate><guid>https://cirplan.me/post/2016/02-19-js-date-type2/</guid><description>记得很久之前，有简单的记录过 js 中的数据类型（点这里）。那么，如何去判断一个变量的数据类型呢？ 先来看看一些判断 bug ： typeof null // &amp;quot;object&amp;quot; typeof new String('abc') // &amp;quot;object&amp;quot; var iframeArr = new window.frames[0].Array;</description></item><item><title>JS中apply、call和bind的定义和使用</title><link>https://cirplan.me/post/2016/01-28-apply-call/</link><pubDate>Thu, 28 Jan 2016 22:04:28 +0800</pubDate><guid>https://cirplan.me/post/2016/01-28-apply-call/</guid><description>本来没打算想写这个的，因为一直觉得 apply 和 call 挺简单的，不就是改变运行上下文嘛。然后 apply 和 call 只是参数接受的方式不同而已。 但在用的时候，总是会有点问题</description></item><item><title>Promise初级教程3：解析流程</title><link>https://cirplan.me/post/2016/01-26-promise-study-3/</link><pubDate>Tue, 26 Jan 2016 01:12:36 +0800</pubDate><guid>https://cirplan.me/post/2016/01-26-promise-study-3/</guid><description>接上篇，下面的序号是为了与规范中一致。 2.3. Promise 解析流程 这里主要是根据规范来看，要注意哈，搬运工又来了。 Promise 解析过程 是以一个 promise 和一个值 x 做为参数的抽</description></item><item><title>Promise初级教程2：详细介绍</title><link>https://cirplan.me/post/2016/01-25-promise-study-2/</link><pubDate>Mon, 25 Jan 2016 01:12:27 +0800</pubDate><guid>https://cirplan.me/post/2016/01-25-promise-study-2/</guid><description>上一篇简单介绍了 Promise 的外形，让大家了解 Promise 是什么样的，可以用在哪里，有个心理准备。不然突然跳出个恐龙出来，吓你们一跳，233。 其实这篇文章才算正</description></item><item><title>Promise初级教程1：简单使用</title><link>https://cirplan.me/post/2016/01-22-promise-study-1/</link><pubDate>Fri, 22 Jan 2016 01:12:14 +0800</pubDate><guid>https://cirplan.me/post/2016/01-22-promise-study-1/</guid><description>就快过年了，项目组是准备在回去之前，发完2.4版本。然后现在已经进入测试后期了。 趁着现在有点时间，把之前一直想写的promise写一下。 刚说</description></item><item><title>JS模块化开发3：require.js的使用以及压缩策略</title><link>https://cirplan.me/post/2015/10-19-js-requirejs/</link><pubDate>Mon, 19 Oct 2015 00:48:53 +0800</pubDate><guid>https://cirplan.me/post/2015/10-19-js-requirejs/</guid><description>require.js是遵循AMD规范的模块加载器，这里简单说说其用法和压缩策略。 本文内容： 1.基本使用 2.如何打包压缩 基本使用 1.1 加载 要使用r</description></item><item><title>JS模块化开发2：AMD与CMD规范</title><link>https://cirplan.me/post/2015/10-18-js-amd-cmd/</link><pubDate>Thu, 08 Oct 2015 00:36:33 +0800</pubDate><guid>https://cirplan.me/post/2015/10-18-js-amd-cmd/</guid><description>接着上一篇，这里说下AMD与CMD规范。 本文内容： 1.AMD规范 2.CMD规范 3.AMD规范CMD规范的异同点 1. AMD规范（代表requir</description></item><item><title>JS模块化开发1：历史</title><link>https://cirplan.me/post/2015/10-17-js-module/</link><pubDate>Wed, 07 Oct 2015 00:26:43 +0800</pubDate><guid>https://cirplan.me/post/2015/10-17-js-module/</guid><description>开篇感言：一直以来懒散的很，以为想改就改，无须过于在意。但现在发现懒散的态度已经融到骨子里了，还能改否？曰：难。 前言： JS模块化在现在早已不</description></item><item><title>canvas分辨率问题</title><link>https://cirplan.me/post/2015/07-06-canvas-resolution/</link><pubDate>Mon, 06 Jul 2015 00:15:09 +0800</pubDate><guid>https://cirplan.me/post/2015/07-06-canvas-resolution/</guid><description>过程：最近尝试用H5的canvas写了个小游戏，然后加载图片的时候发现，在电脑上图片是很清晰的，但到了手机上就看到比较模糊（图片都是实际大小</description></item><item><title>js之ajax学习笔记</title><link>https://cirplan.me/post/2013/03-23-ajax-learn/</link><pubDate>Sat, 23 Mar 2013 21:10:21 +0800</pubDate><guid>https://cirplan.me/post/2013/03-23-ajax-learn/</guid><description>起源: XHR在IE5中引入，所以在IE中可能会遇到三种不同的版本 MSXML2.XMLHttp.6.0, MSXML2.XMLHttp.3.0，MSXML2.XMLHttp。 一、建</description></item><item><title>javascript数据类型</title><link>https://cirplan.me/post/2013/03-02-js-date-type/</link><pubDate>Sat, 02 Mar 2013 20:59:51 +0800</pubDate><guid>https://cirplan.me/post/2013/03-02-js-date-type/</guid><description>5种数据类型：undefined；null；boolean；number；string； 特殊：object； typeof（操作符）：检测数据</description></item></channel></rss>